function [auc, map, prec10, rprec] = main_ENTP_delta(SVM_flag, numFile, meth, screen_encode_mode, screen_weight_mode, screen_lambda, screen_mode, par)
% profile on;
cp = pwd;
%% Set of path arguments
% feature dimension
dim_feat = 36;
lambda = 1/sqrt(dim_feat);
if ~exist('screen_lambda', 'var');
    screen_lambda = 8 * lambda;
end
% normalization method before SVM
if ~exist('meth', 'var');
    meth = [1 2];
end
%   1: sum2one
%   2: square root
%   3: cube root
%   4: tf-idf
%   5: z-score

pool = 'mean';
% 'sum'
% 'max'
% 'mean'
% 'mean_std'

if screen_lambda > 1
    screen_lambda = 1;
end
if ~exist('screen_mode', 'var');
    screen_mode = 'ST3';
end
if ~exist('screen_encode_mode', 'var');
    screen_encode_mode = 4; % 1: original, solve by exact solution of screening
                            % 2: intersection (vote)
                            % 3: union
                            % 4: vote and choose first 'par' high value
                            % 5: weighted mode
end
% naming generation later by string conversion for screen_encode_mode                        
sc_mode = screen_name_convert(screen_encode_mode)

if isunix
    rootpath = '~/Z:/';
else
    rootpath = 'Z:/';
end
% parameters, the number of atoms is decided by numFile x numSeg
if ~exist('numFile', 'var');
    numFile = 96;
end
numSeg  = 1;
if ~exist('par', 'var');
    par = ceil(0.1 * numFile * numSeg);
else
    par = ceil(par * numFile * numSeg);
end
if ~exist('screen_weight_mode', 'var')
    screen_weight_mode = 1;
end

% subdir of output files
if screen_encode_mode == 0
    subdir = strcat('delta_D_', num2str(numFile), '_', num2str(numSeg), strcat('/screen_', screen_mode, '_', sc_mode, '_', num2str(par), '/'));
elseif screen_encode_mode == 5    
    subdir = strcat('delta_D_', num2str(numFile), '_', num2str(numSeg), strcat('/screen_', screen_mode, '_', sc_mode, '_', num2str(par), '_func_', num2str(screen_weight_mode), '_lambdas_', num2str(screen_lambda), '/'));
elseif screen_encode_mode ~=2 && screen_encode_mode ~= 4
    subdir = strcat('delta_D_', num2str(numFile), '_', num2str(numSeg), strcat('/screen_', screen_mode, '_', sc_mode, '_lambdas_', num2str(screen_lambda), '/'));
else
    subdir = strcat('delta_D_', num2str(numFile), '_', num2str(numSeg), strcat('/screen_', screen_mode, '_', sc_mode, '_', num2str(par), '_lambdas_', num2str(screen_lambda), '/'));
end

subdir = [subdir(1:end-1) '_screen_only/'];
% package path
SPAMS_path = '../ODL/PC/spams-matlab';
addpath(genpath('../'));

% feature path
path_feat_pitch_cal10k = 'Z:/cal10k/EchoNest/segment_pitch/';
path_feat_timbre_cal10k = 'Z:/cal10k/EchoNest/segment_timbre/';
path_feat_pitch_MSD = 'Z:/MillionSongDataset/segment_pitch/';
path_feat_timbre_MSD = 'Z:/MillionSongDataset/segment_timbre/';

% pre-processing path
path_pre_proc_pitch_cal10k = 'Z:/cal10k/EchoNest/pitch_delta_normalized/';
path_pre_proc_timbre_cal10k = 'Z:/cal10k/EchoNest/timbre_delta_normalized/';
path_pre_proc_pitch_MSD = 'Z:/MillionSongDataset/pitch_delta_normalized/';
path_pre_proc_timbre_MSD = 'Z:/MillionSongDataset/timbre_delta_normalized/';

% dictionary path
path_pitch_D = strcat('Z:/ICASSP2014_journal_output/result/dictionary/pitch/pitch_delta_D_', num2str(numFile), '_', num2str(numSeg), '_together');
path_timbre_D = strcat('Z:/ICASSP2014_journal_output/result/dictionary/timbre/timbre_delta_D_', num2str(numFile), '_', num2str(numSeg), '_together');

% codeword path
path_codeword_pitch  = strcat('Z:/ICASSP2014_journal_output/result/codeword/pitch_/', subdir);
path_codeword_timbre = strcat('Z:/ICASSP2014_journal_output/result/codeword/timbre/', subdir);
path_post_proc = strcat('Z:/ICASSP2014_journal_output/result/post_proc/', pool, '/', subdir);

% classification and result path
path_SVM_res = strcat('Z:/ICASSP2014_journal_output/result/classification/', pool, '/', subdir);
name_norm = norm_name_convert(meth);
prefix_res = strcat('auc_opti_', name_norm ,'norm_');
path_time = strcat('Z:/ICASSP2014_journal_output/result/time_report/', pool, '/', subdir);

%% Pre-processing
% normalization is required before screening
% pre_process_main(path_feat_pitch_cal10k, path_pre_proc_pitch_cal10k);
% pre_process_main(path_feat_timbre_cal10k, path_pre_proc_timbre_cal10k);
%% Dictionary training
% normalization is required before screening, and it is done in
% train_dictionary
% pitch_D = train_dictionary(path_feat_pitch_MSD, numFile, numSeg);
% timbre_D = train_dictionary(path_feat_timbre_MSD, numFile, numSeg);
% save(path_D, 'pitch_D', 'timbre_D');

if ~SVM_flag
%% L1/L0-solver          
% cp = pwd;
% feat 1
encode(SPAMS_path, path_timbre_D, path_pre_proc_timbre_cal10k, path_codeword_timbre, lambda, screen_lambda, screen_mode, screen_encode_mode, par, screen_weight_mode);
% feat 2
encode(SPAMS_path, path_pitch_D, path_pre_proc_pitch_cal10k, path_codeword_pitch, lambda, screen_lambda, screen_mode, screen_encode_mode, par, screen_weight_mode);
% cd(pwd);

%% Post-processing
path_feats{1} = path_codeword_pitch;
path_feats{2} = path_codeword_timbre;

post_proc_main(pool, path_feats, path_post_proc);

end
%% Classification
[auc, map, prec10, rprec] = classification_choose_normalization_echonest_optimize_map_main(path_post_proc, path_SVM_res, prefix_res, path_time, meth);

% profile off
cd(cp);
% profsave(profile('info'), path_time);
%% send mail
% [receiver, title, contents attachment] = ReadMail('./mail_main.txt');
% MailReport_NAS(receiver, title, contents, attachment);
