#{{{ Completion Stuff# Faster! (?)zstyle ':completion::complete:*' use-cache 1# case insensitive completionzstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'zstyle ':completion:*' verbose yeszstyle ':completion:*:descriptions' format '%B%d%b'zstyle ':completion:*:messages' format '%d'zstyle ':completion:*:warnings' format 'No matches for: %d'zstyle ':completion:*' group-name ''#zstyle ':completion:*' completer _oldlist _expand _force_rehash _completezstyle ':completion:*' completer _expand _force_rehash _complete _approximate _ignored# generate descriptions with magic.zstyle ':completion:*' auto-description 'specify: %d'# Don't prompt for a huge list, page it!zstyle ':completion:*:default' list-prompt '%S%M matches%s'# Don't prompt for a huge list, menu it!zstyle ':completion:*:default' menu 'select=0'# Have the newer files last so I see them firstzstyle ':completion:*' file-sort modification reverse# color code completion!!!!  Wohoo!zstyle ':completion:*' list-colors "=(#b) #([0-9]#)*=36=31"unsetopt LIST_AMBIGUOUSsetopt  COMPLETE_IN_WORD# Separate man page sections.  Neat.zstyle ':completion:*:manuals' separate-sections true# Egomaniac!zstyle ':completion:*' list-separator 'fREW'# complete with a menu for xwindow idszstyle ':completion:*:windows' menu on=0zstyle ':completion:*:expand:*' tag-order all-expansions# more errors allowed for large words and fewer for small wordszstyle ':completion:*:approximate:*' max-errors 'reply=(  $((  ($#PREFIX+$#SUFFIX)/3  ))  )'# Errors formatzstyle ':completion:*:corrections' format '%B%d (errors %e)%b'# Don't complete stuff already on the line,V
#{{{ Completion Stuff# Faster! (?)zstyle ':completion::complete:*' use-cache 1# case insensitive completionzstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'zstyle ':completion:*' verbose yeszstyle ':completion:*:descriptions' format '%B%d%b'zstyle ':completion:*:messages' format '%d'zstyle ':completion:*:warnings' format 'No matches for: %d'zstyle ':completion:*' group-name ''#zstyle ':completion:*' completer _oldlist _expand _force_rehash _completezstyle ':completion:*' completer _expand _force_rehash _complete _approximate _ignored# generate descriptions with magic.zstyle ':completion:*' auto-description 'specify: %d'# Don't prompt for a huge list, page it!zstyle ':completion:*:default' list-prompt '%S%M matches%s'# Don't prompt for a huge list, menu it!zstyle ':completion:*:default' menu 'select=0'# Have the newer files last so I see them firstzstyle ':completion:*' file-sort modification reverse# color code completion!!!!  Wohoo!zstyle ':completion:*' list-colors "=(#b) #([0-9]#)*=36=31"unsetopt LIST_AMBIGUOUSsetopt  COMPLETE_IN_WORD# Separate man page sections.  Neat.zstyle ':completion:*:manuals' separate-sections true# Egomaniac!zstyle ':completion:*' list-separator 'fREW'# complete with a menu for xwindow idszstyle ':completion:*:windows' menu on=0zstyle ':completion:*:expand:*' tag-order all-expansions# more errors allowed for large words and fewer for small wordszstyle ':completion:*:approximate:*' max-errors 'reply=(  $((  ($#PREFIX+$#SUFFIX)/3  ))  )'# Errors formatzstyle ':completion:*:corrections' format '%B%d (errors %e)%b'# Don't complete stuff already on the linezstyle ':completion::*:(rm|vi):*' ignore-line true# Don't complete directory we are already in (../here)zstyle ':completion:*' ignore-parents parent pwdzstyle ':completion::approximate*:*' prefix-needed false#}}},V
alias rv='vim +PluginClean +PluginInstall +PluginUpdate +qall'alias rz='source ~/.zshrc'alias ez='vim ~/.zshrc'function pdf() { mupdf-x11 "$1" & },V
alias ls='ls -pG'alias ll='ls -plGA'alias la='ls -pGA',V
FreeBSD,v
elif [[ "$unamestr" == 'FreeBSD' ]]; then,V
 ,v
i ]] ]],v
,V
# export MANPATH="/usr/local/man:$MANPATH",V
export PATH=$HOME/bin:/usr/local/bin:$PATH,V
%,v
export PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Applications/Matlab_R2014b.app/bin:/usr/texbin",v
http://plainlaw.me/2014/12/13/abian1/,v
https://elsdrm@github.com/elsdrm/oh-my-zsh.git,v
=,v
_LIBERTY=,v
_LIBERTY="$ret_status $",V
>,v
s,v
↑,v
S,v
if [[ $last_command == 0 ]]; then  %{$fg[green]%}$"else  _LIBERTY="%{$fg[white]%}$last_command"  _LIBERTY+="%{$fg[red]%}#"fi,V
_LIBERTY="> ,v
green,v
local ret_status="%(?:%{$fg_bold[green]%}Ξ:%{$fg_bold[red]%}%S↑%s%?)",v
bureau_elsdrm,v
  _LIBERTY="> %{$fg[green]%}$",V
  _LIBERTY="%{$fg[red]%}#",V
  _LIBERTY="%{$fg[green]%}$",V
white,v
i,v
e,v
d,v
3,v
burea,v
u",v
ZSH_THEME="burea,v
bureau,v
3den,v
#,v
ZSH_THEME_GIT_PROMPT_PREFIX="[%{$fg_bold[green]%}±%{$reset_color%}%{$fg_bold[white]%}"ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}]"ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg_bold[green]%}✓%{$reset_color%}"ZSH_THEME_GIT_PROMPT_AHEAD="%{$fg[cyan]%}▴%{$reset_color%}"ZSH_THEME_GIT_PROMPT_BEHIND="%{$fg[magenta]%}▾%{$reset_color%}"ZSH_THEME_GIT_PROMPT_STAGED="%{$fg_bold[green]%}●%{$reset_color%}"ZSH_THEME_GIT_PROMPT_UNSTAGED="%{$fg_bold[yellow]%}●%{$reset_color%}"ZSH_THEME_GIT_PROMPT_UNTRACKED="%{$fg_bold[red]%}●%{$reset_color%}"bureau_git_branch () {  ref=$(command git symbolic-ref HEAD 2> /dev/null) || \  ref=$(command git rev-parse --short HEAD 2> /dev/null) || return  echo "${ref#refs/heads/}"}bureau_git_status () {  _INDEX=$(command git status --porcelain -b 2> /dev/null)  _STATUS=""  if $(echo "$_INDEX" | grep '^[AMRD]. ' &> /dev/null); then    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_STAGED"  fi  if $(echo "$_INDEX" | grep '^.[MTD] ' &> /dev/null); then    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_UNSTAGED"  fi  if $(echo "$_INDEX" | grep -E '^\?\? ' &> /dev/null); then    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_UNTRACKED"  fi  if $(echo "$_INDEX" | grep '^UU ' &> /dev/null); then    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_UNMERGED"  fi  if $(command git rev-parse --verify refs/stash >/dev/null 2>&1); then    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_STASHED"  fi  if $(echo "$_INDEX" | grep '^## .*ahead' &> /dev/null); then    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_AHEAD"  fi  if $(echo "$_INDEX" | grep '^## .*behind' &> /dev/null); then    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_BEHIND"  fi  if $(echo "$_INDEX" | grep '^## .*diverged' &> /dev/null); then    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_DIVERGED"  fi  echo $_STATUS}bureau_git_prompt () {  local _branch=$(bureau_git_branch)  local _status=$(bureau_git_status)  local _result=""  if [[ "${_branch}x" != "x" ]]; then    _result="$ZSH_THEME_GIT_PROMPT_PREFIX$_branch"    if [[ "${_status}x" != "x" ]]; then      _result="$_result $_status"    fi    _result="$_result$ZSH_THEME_GIT_PROMPT_SUFFIX"  fi  echo $_result},V
cloud,v
cloud",v
 Raspberry Pi,v
# plugins, and themes. Aliases can be placed here, though oh-my-zsh,V
# Set personal aliases, overriding those provided by oh-my-zsh libs,,V
# users are encouraged to define aliases within the ZSH_CUSTOM folder.# For a full list of active aliases, run `alias`.,V
 alias ohmyzsh="mate ~/.oh-my-zsh",V
## Example aliases# alias zshconfig="mate ~/.zshrc"#,v
# Uncomment the following line to change how often to auto-update (in days).,V
# export UPDATE_ZSH_DAYS=13,V
# DISABLE_LS_COLORS="true",V
# Uncomment the following line to disable colors in ls.,V
robbyrussell,v
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc,v
if [[ $STY = '' ]] then screen -xR; fi,V
# Autoload screen if we aren't in it.  (Thanks Fjord!),V
https://www.youtube.com/watch?v=LJ6ydLI-RIg,v
',v
PROMPT=%{$fg[magenta]%}%n%{$reset_color%} at %{$fg[yellow]%}%m%{$reset_color%},V
PS1="${host_prompt} ${jobs_total}${history_total} ${directory_prompt}${error_total}${post_prompt} "PROMPT=%{$fg[magenta]%}%n%{$reset_color%} at %{$fg[yellow]%}%m%{$reset_color%},V
%{$fg[magenta]%}%n%{$reset_color%} at %{$fg[yellow]%}%m%{$reset_color%},v
m,v
export KEYTIMEOUT=1,v
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx,v
a,v
o,v
l,v
alias reload='source ~/.zshrc',V
ublic/MAClab-iMac [52] % ls,v
 && source ~/.bashrc',v
# Setting some aliases 10                                                                                                                    |  9 alias ..='cd ..' 11 #}}}                                                                                                               | 10 alias ....='cd ../..' 12                                                                                                                    | 11 alias ls='ls -pG' 13 #{{{ Options                                                                                                       | 12 alias ll='ls -plGA' 14                                                                                                                    | 13 alias la='ls -pGA' 15 # why would you type 'cd dir' if you could just type 'dir'?                                                        | 14 alias reload='source ~/.zshrc && source ~/.bashrc' 16 setopt AUTO_CD                                                                                                     | 15 alias reloadvim='vim +PluginClean +PluginInstall +PluginUpdate +qall' 17                                                                                                                    | 16 function pdf() { mupdf-x11 "$1" & },v
alias mk=popd,V
function pdf() { mupdf-x11 "$1" & },V
# Setting some aliases,V
# Setting some aliasesalias ..='cd ..'alias ....='cd ../..'alias ls='ls -pG'alias ll='ls -plGA'alias la='ls -pGA'alias reload='source ~/.zshrc && source ~/.bashrc'alias reloadvim='vim +PluginClean +PluginInstall +PluginUpdate +qall'function pdf() { mupdf-x11 "$1" & },V
CURRENT_BG='NONE'SEGMENT_SEPARATOR='⮀'# Begin a segment# Takes two arguments, background and foreground. Both can be omitted,# rendering default background/foreground.prompt_segment() {  local bg fg  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then    echo -n " %{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%} "  else    echo -n "%{$bg%}%{$fg%} "  fi  CURRENT_BG=$1  [[ -n $3 ]] && print -Pn $3}# End the prompt, closing any open segmentsprompt_end() {  if [[ -n $CURRENT_BG ]]; then    echo -n " %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"  else    echo -n "%{%k%}"  fi  echo -n "%{%f%}"  CURRENT_BG=''}function build_prompt {  prompt_segment black default '%(1?;%{%F{red}%}✘ ;)%(!;%{%F{yellow}%}⚡ ;)%(1j;%{%F{cyan}%}%j⚙ ;)%{%F{blue}%}%n%{%F{red}%}@%{%F{green}%}%M'  prompt_segment blue black '%2~'  if $git_status; then    prompt_segment green black '${(e)git_info[prompt]}${git_info[status]}'  fi  prompt_end}function prompt_paradox_setup {  setopt LOCAL_OPTIONS  unsetopt XTRACE KSH_ARRAYS  prompt_opts=(cr percent subst)  # Load required functions.  autoload -Uz add-zsh-hook  # Add hook for calling git-info before each command.  add-zsh-hook preexec prompt_paradox_preexec  add-zsh-hook precmd prompt_paradox_precmd  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'  zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{blue}❯%f%b'  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{red}♺%f'  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{red}❮%f%b'  zstyle ':prezto:module:git:info:action' format '! %s'  zstyle ':prezto:module:git:info:added' format '✚'  zstyle ':prezto:module:git:info:ahead' format '⬆'  zstyle ':prezto:module:git:info:behind' format '⬇'  zstyle ':prezto:module:git:info:branch' format '⭠ %b'  zstyle ':prezto:module:git:info:commit' format '➦ %.7c'  zstyle ':prezto:module:git:info:deleted' format '✖'  zstyle ':prezto:module:git:info:modified' format '✱'  zstyle ':prezto:module:git:info:position' format '%p'  zstyle ':prezto:module:git:info:renamed' format '➙'  zstyle ':prezto:module:git:info:stashed' format 's'  zstyle ':prezto:module:git:info:unmerged' format '═'  zstyle ':prezto:module:git:info:untracked' format '?'  zstyle ':prezto:module:git:info:keys' format \    'prompt' '$(coalesce "%b" "%p" "%c")%s' \    'status' ' %A%B%S%a%d%m%r%U%u'  # Define prompts.  PROMPT='%{%f%b%k%}$(build_prompt) ${editor_info[keymap]} '  RPROMPT='[%D{%L:%M:%S %p}]'  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '}start_time=$SECONDSfunction prompt_paradox_preexec {  start_time=$SECONDS}function prompt_paradox_precmd {  setopt LOCAL_OPTIONS  unsetopt XTRACE KSH_ARRAYS  # Get Git repository information.  if (( $+functions[git-info] )); then    git_status=git-info  fi  timer_result=$(($SECONDS-$start_time))  if [[ $timer_result -gt 10 ]]; then    calc_elapsed_time  fi  start_time=$SECONDS}function calc_elapsed_time {  if [[ $timer_result -ge 3600 ]]; then    let "timer_hours = $timer_result / 3600"    let "remainder = $timer_result % 3600"    let "timer_minutes = $remainder / 60"    let "timer_seconds = $remainder % 60"    print -P "%B%F{red}>>> elapsed time ${timer_hours}h${timer_minutes}m${timer_seconds}s%b"  elif [[ $timer_result -ge 60 ]]; then    let "timer_minutes = $timer_result / 60"    let "timer_seconds = $timer_result % 60"    print -P "%B%F{yellow}>>> elapsed time ${timer_minutes}m${timer_seconds}s%b"  elif [[ $timer_result -gt 10 ]]; then    print -P "%B%F{green}>>> elapsed time ${timer_result}s%b"  fi},V
/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Applications/Matlab_R2014b.app/bin:,v
export INFOPATH="$INFOPATH:/usr/local/texlive/2012/texmf/doc/info",V
export MATHPATH="$MANPATH:/usr/local/texlive/2012/texmf/doc/man",V
export RI="--format ansi",V
export PATH="$PATH:/usr/local/texlive/2007/bin/i386-linux",V
alias ls='pwd; ls --color',V
#}}},V
# copy with a progress bar.alias cpv="rsync -poghb --backup-dir=/tmp/rsync -e /dev/null --progress --",V
bindkey -M viins '\C-i' complete-word,V
# save a few keystrokes when opening the learn sql databaseif [[ -x `which psql` ]]; then  alias lrnsql="psql learn_sql"fi# I use the commands like, every day nowalias seinr="sudo /etc/init.d/networking restart"if [[ -x `which gksudo` && -x `which wlassistant` ]]; then  alias gkw="gksudo wlassistant&"fialias kgs='javaws http://files.gokgs.com/javaBin/cgoban.jnlp'if [[ -x `which delish` ]]; then  alias delish="noglob delish"fialias tomes='screen -S tome -c /home/frew/.tomescreenrc'alias mpfs='mplayer -fs -zoom'alias mpns='mplayer -nosound'if [[ -x /home/frew/personal/dino ]]; then  dinoray=( /home/frew/personal/dino/* )  alias dino='feh $dinoray[$RANDOM%$#dinoray+1]'fi#}}}#{{{ Globals...alias -g G="| grep"alias -g L="| less"#}}}#{{{ Suffixes...if [[ -x `which abiword` ]]; then  alias -s doc=abiwordfiif [[ -x `which ooimpress` ]]; then  alias -s ppt='ooimpress &> /dev/null 'fiif [[ $DISPLAY = '' ]] then  alias -s txt=vielse  alias -s txt=gvimfi#}}},V
#{{{ Package managementif [[ -x =aptitude ]]; then  alias attd="sudo xterm -C aptitude"else  if [[ -x =emerge ]]; then    alias emu='sudo emerge -uDN world'    alias emup='sudo emerge -uDvpN world'    alias esy='sudo emerge --sync'    alias ei='sudo emerge'    alias eip='sudo emerge -vp '    alias packmask='sudo vi /etc/portage/package.unmask'    alias packuse='sudo vi /etc/portage/package.use'    alias packkey='sudo vi /etc/portage/package.keywords'  fifi#}}}#{{{ SSHif [[ $HOST = FrewSchmidt ]]; then    alias sf='ssh frew@FrewSchmidt2'else    alias sf='ssh frew@FrewSchmidt'fialias enosh='ssh schmidtf@enosh.letnet.net'alias s31='ssh 192.168.3.1'alias s39='ssh 192.168.3.9'#}}}#{{{ Misc.if [[ -x `which tea_chooser` ]]; then# I need to do this more elegantly...    alias rt='cd /home/frew/bin/run/tea_chooser; ./randtea.rb'fi# CPAN and sudo don't work together or somethingif [[ -x `which perl` ]]; then  alias cpan="su root -c 'perl -MCPAN -e \"shell\"'"fi# Maxima with line editing!  Now if only I could use zle...if [[ -x `which maxima` && -x `which ledit` ]]; then  alias maxima='ledit maxima'fi# Convenient.  Also works in Gentoo or Ubuntuif [[ -x `which irb1.8` ]]; then  alias irb='irb1.8 --readline -r irb/completion'else  alias irb='irb --readline -r irb/completion'fi# For some reason the -ui doesn't work on Ubuntu... I need to deal with that# somehow...if [[ -x `which unison` ]]; then  alias un='unison -ui graphic -perms 0 default'  alias un.='unison -ui graphic -perms 0 dotfiles'fi# fri is faster.if [[ -x `which fri` ]]; then  alias ri=frifi# This is how you can see all of my passwords.alias auth='view ~/.auth.des3',V
#{{{ Amarokif [[ -x =amarok ]]; then  alias play='dcop amarok player play'  alias pause='dcop amarok player pause'  alias next='dcop amarok player next'  alias prev='dcop amarok player prev'  alias stop='dcop amarok player stop'  alias current='dcop amarok player nowPlaying'  alias osd='dcop amarok player showOSD'  alias pp='dcop amarok player playPause'fi#}}},V
ZSH_THEME_GIT_PROMPT_CLEAN="",V
ZSH_THEME_GIT_PROMPT_DIRTY="*",V
ZSH_THEME_GIT_PROMPT_SUFFIX=")%{$reset_color%}",V
ZSH_THEME_GIT_PROMPT_PREFIX=" %{$fg[white]%}(",V
%{$fg_bold[green]%}%n$%{$reset_color%} ',V
PROMPT=$'%{$fg[white]%}$(~/.rvm/bin/rvm-prompt) %{$fg_bold[cyan]%}%~%{$reset_color%}$(git_prompt_info) %{$fg[cyan]%}%D{[%I:%M:%S]}\,V
# Autoload screen if we aren't in it.  (Thanks Fjord!)if [[ $STY = '' ]] then screen -xR; fi#{{{ ZSH Modulesautoload -U compinit promptinit zcalc zsh-mime-setupcompinitpromptinitzsh-mime-setup#}}}#{{{ Options# why would you type 'cd dir' if you could just type 'dir'?setopt AUTO_CD# Now we can pipe to multiple outputs!setopt MULTIOS# Spell check commands!  (Sometimes annoying)setopt CORRECT# This makes cd=pushdsetopt AUTO_PUSHD# This will use named dirs when possiblesetopt AUTO_NAME_DIRS# If we have a glob this will expand itsetopt GLOB_COMPLETEsetopt PUSHD_MINUS# No more annoying pushd messages...# setopt PUSHD_SILENT# blank pushd goes to homesetopt PUSHD_TO_HOME# this will ignore multiple directories for the stack.  Useful?  I dunno.setopt PUSHD_IGNORE_DUPS# 10 second wait if you do something that will delete everything.  I wish I'd had this before...setopt RM_STAR_WAIT# use magic (this is default, but it can't hurt!)setopt ZLEsetopt NO_HUPsetopt VI# only fools wouldn't do this ;-)export EDITOR="vi"setopt IGNORE_EOF# If I could disable Ctrl-s completely I would!setopt NO_FLOW_CONTROL# beeps are annoyingsetopt NO_BEEP# Keep echo "station" > station from clobbering stationsetopt NO_CLOBBER# Case insensitive globbingsetopt NO_CASE_GLOB# Be Reasonable!setopt NUMERIC_GLOB_SORT# I don't know why I never set this before.setopt EXTENDED_GLOB# hows about arrays be awesome?  (that is, frew${cool}frew has frew surrounding all the variables, not just first and lastsetopt RC_EXPAND_PARAM#}}}#{{{ Variablesexport MATHPATH="$MANPATH:/usr/local/texlive/2007/texmf/doc/man"export INFOPATH="$INFOPATH:/usr/local/texlive/2007/texmf/doc/info"export PATH="$PATH:/usr/local/texlive/2007/bin/i386-linux"export RI="--format ansi"declare -U path#export LANG=en_USexport PAGER=most#}}}#{{{ External Files# Include stuff that should only be on thisif [[ -r ~/.localinclude ]]; then    source ~/.localincludefi# Include local directoriesif [[ -r ~/.localdirs ]]; then        source ~/.localdirsfiautoload run-helpHELPDIR=~/zsh_help#}}}#{{{ Aliases#{{{ Amarokif [[ -x =amarok ]]; then  alias play='dcop amarok player play'  alias pause='dcop amarok player pause'  alias next='dcop amarok player next'  alias prev='dcop amarok player prev'  alias stop='dcop amarok player stop'  alias current='dcop amarok player nowPlaying'  alias osd='dcop amarok player showOSD'  alias pp='dcop amarok player playPause'fi#}}}#{{{ Shell Conveniencesalias sz='source ~/.zshrc'alias ez='vim ~/.zshrc'alias mk=popdalias ls='pwd; ls --color'#}}}#{{{ Package managementif [[ -x =aptitude ]]; then  alias attd="sudo xterm -C aptitude"else  if [[ -x =emerge ]]; then    alias emu='sudo emerge -uDN world'    alias emup='sudo emerge -uDvpN world'    alias esy='sudo emerge --sync'    alias ei='sudo emerge'    alias eip='sudo emerge -vp '    alias packmask='sudo vi /etc/portage/package.unmask'    alias packuse='sudo vi /etc/portage/package.use'    alias packkey='sudo vi /etc/portage/package.keywords'  fifi#}}}#{{{ SSHif [[ $HOST = FrewSchmidt ]]; then    alias sf='ssh frew@FrewSchmidt2'else    alias sf='ssh frew@FrewSchmidt'fialias enosh='ssh schmidtf@enosh.letnet.net'alias s31='ssh 192.168.3.1'alias s39='ssh 192.168.3.9'#}}}#{{{ Misc.if [[ -x `which tea_chooser` ]]; then# I need to do this more elegantly...    alias rt='cd /home/frew/bin/run/tea_chooser; ./randtea.rb'fi# CPAN and sudo don't work together or somethingif [[ -x `which perl` ]]; then  alias cpan="su root -c 'perl -MCPAN -e \"shell\"'"fi# Maxima with line editing!  Now if only I could use zle...if [[ -x `which maxima` && -x `which ledit` ]]; then  alias maxima='ledit maxima'fi# Convenient.  Also works in Gentoo or Ubuntuif [[ -x `which irb1.8` ]]; then  alias irb='irb1.8 --readline -r irb/completion'else  alias irb='irb --readline -r irb/completion'fi# For some reason the -ui doesn't work on Ubuntu... I need to deal with that# somehow...if [[ -x `which unison` ]]; then  alias un='unison -ui graphic -perms 0 default'  alias un.='unison -ui graphic -perms 0 dotfiles'fi# fri is faster.if [[ -x `which fri` ]]; then  alias ri=frifi# This is how you can see all of my passwords.alias auth='view ~/.auth.des3'# copy with a progress bar.alias cpv="rsync -poghb --backup-dir=/tmp/rsync -e /dev/null --progress --"# save a few keystrokes when opening the learn sql databaseif [[ -x `which psql` ]]; then  alias lrnsql="psql learn_sql"fi# I use the commands like, every day nowalias seinr="sudo /etc/init.d/networking restart"if [[ -x `which gksudo` && -x `which wlassistant` ]]; then  alias gkw="gksudo wlassistant&"fialias kgs='javaws http://files.gokgs.com/javaBin/cgoban.jnlp'if [[ -x `which delish` ]]; then  alias delish="noglob delish"fialias tomes='screen -S tome -c /home/frew/.tomescreenrc'alias mpfs='mplayer -fs -zoom'alias mpns='mplayer -nosound'if [[ -x /home/frew/personal/dino ]]; then  dinoray=( /home/frew/personal/dino/* )  alias dino='feh $dinoray[$RANDOM%$#dinoray+1]'fi#}}}#{{{ Globals...alias -g G="| grep"alias -g L="| less"#}}}#{{{ Suffixes...if [[ -x `which abiword` ]]; then  alias -s doc=abiwordfiif [[ -x `which ooimpress` ]]; then  alias -s ppt='ooimpress &> /dev/null 'fiif [[ $DISPLAY = '' ]] then  alias -s txt=vielse  alias -s txt=gvimfi#}}}#}}}#{{{ Completion Stuffbindkey -M viins '\C-i' complete-word# Faster! (?)zstyle ':completion::complete:*' use-cache 1# case insensitive completionzstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'zstyle ':completion:*' verbose yeszstyle ':completion:*:descriptions' format '%B%d%b'zstyle ':completion:*:messages' format '%d'zstyle ':completion:*:warnings' format 'No matches for: %d'zstyle ':completion:*' group-name ''#zstyle ':completion:*' completer _oldlist _expand _force_rehash _completezstyle ':completion:*' completer _expand _force_rehash _complete _approximate _ignored# generate descriptions with magic.zstyle ':completion:*' auto-description 'specify: %d'# Don't prompt for a huge list, page it!zstyle ':completion:*:default' list-prompt '%S%M matches%s'# Don't prompt for a huge list, menu it!zstyle ':completion:*:default' menu 'select=0'# Have the newer files last so I see them firstzstyle ':completion:*' file-sort modification reverse# color code completion!!!!  Wohoo!zstyle ':completion:*' list-colors "=(#b) #([0-9]#)*=36=31"unsetopt LIST_AMBIGUOUSsetopt  COMPLETE_IN_WORD# Separate man page sections.  Neat.zstyle ':completion:*:manuals' separate-sections true# Egomaniac!zstyle ':completion:*' list-separator 'fREW'# complete with a menu for xwindow idszstyle ':completion:*:windows' menu on=0zstyle ':completion:*:expand:*' tag-order all-expansions# more errors allowed for large words and fewer for small wordszstyle ':completion:*:approximate:*' max-errors 'reply=(  $((  ($#PREFIX+$#SUFFIX)/3  ))  )'# Errors formatzstyle ':completion:*:corrections' format '%B%d (errors %e)%b'# Don't complete stuff already on the linezstyle ':completion::*:(rm|vi):*' ignore-line true# Don't complete directory we are already in (../here)zstyle ':completion:*' ignore-parents parent pwdzstyle ':completion::approximate*:*' prefix-needed false#}}}#{{{ Key bindings# Who doesn't want home and end to work?bindkey '\e[1~' beginning-of-linebindkey '\e[4~' end-of-line# Incremental search is elite!bindkey -M vicmd "/" history-incremental-search-backwardbindkey -M vicmd "?" history-incremental-search-forward# Search based on what you typed in alreadybindkey -M vicmd "//" history-beginning-search-backwardbindkey -M vicmd "??" history-beginning-search-forwardbindkey "\eOP" run-help# oh wow!  This is killer...  try it!bindkey -M vicmd "q" push-line# Ensure that arrow keys work as they shouldbindkey '\e[A' up-line-or-historybindkey '\e[B' down-line-or-historybindkey '\eOA' up-line-or-historybindkey '\eOB' down-line-or-historybindkey '\e[C' forward-charbindkey '\e[D' backward-charbindkey '\eOC' forward-charbindkey '\eOD' backward-charbindkey -M viins 'jj' vi-cmd-modebindkey -M vicmd 'u' undo# Rebind the insert key.  I really can't stand what it currently does.bindkey '\e[2~' overwrite-mode# Rebind the delete key. Again, useless.bindkey '\e[3~' delete-charbindkey -M vicmd '!' edit-command-output# it's like, space AND completion.  Gnarlbot.bindkey -M viins ' ' magic-space#}}}#{{{ History Stuff# Where it gets savedHISTFILE=~/.history# Remember about a years worth of history (AWESOME)SAVEHIST=10000HISTSIZE=10000# Don't overwrite, append!setopt APPEND_HISTORY# Write after each command# setopt INC_APPEND_HISTORY# Killer: share history between multiple shellssetopt SHARE_HISTORY# If I type cd and then cd again, only save the last onesetopt HIST_IGNORE_DUPS# Even if there are commands inbetween commands that are the same, still only save the last onesetopt HIST_IGNORE_ALL_DUPS# Pretty    Obvious.  Right?setopt HIST_REDUCE_BLANKS# If a line starts with a space, don't save it.setopt HIST_IGNORE_SPACEsetopt HIST_NO_STORE# When using a hist thing, make a newline show the change before executing it.setopt HIST_VERIFY# Save the time and how long a command ransetopt EXTENDED_HISTORYsetopt HIST_SAVE_NO_DUPSsetopt HIST_EXPIRE_DUPS_FIRSTsetopt HIST_FIND_NO_DUPS#}}}#{{{ Prompt!host_color=cyanhistory_color=yellowuser_color=greenroot_color=reddirectory_color=magentaerror_color=redjobs_color=greenhost_prompt="%{$fg_bold[$host_color]%}%m%{$reset_color%}"jobs_prompt1="%{$fg_bold[$jobs_color]%}(%{$reset_color%}"jobs_prompt2="%{$fg[$jobs_color]%}%j%{$reset_color%}"jobs_prompt3="%{$fg_bold[$jobs_color]%})%{$reset_color%}"jobs_total="%(1j.${jobs_prompt1}${jobs_prompt2}${jobs_prompt3} .)"history_prompt1="%{$fg_bold[$history_color]%}[%{$reset_color%}"history_prompt2="%{$fg[$history_color]%}%h%{$reset_color%}"history_prompt3="%{$fg_bold[$history_color]%}]%{$reset_color%}"history_total="${history_prompt1}${history_prompt2}${history_prompt3}"error_prompt1="%{$fg_bold[$error_color]%}<%{$reset_color%}"error_prompt2="%{$fg[$error_color]%}%?%{$reset_color%}"error_prompt3="%{$fg_bold[$error_color]%}>%{$reset_color%}"error_total="%(?..${error_prompt1}${error_prompt2}${error_prompt3} )"case "$TERM" in  (screen)    function precmd() { print -Pn "\033]0;S $TTY:t{%100<...<%~%<<}\007" }  ;;  (xterm)    directory_prompt=""  ;;  (*)    directory_prompt="%{$fg[$directory_color]%}%~%{$reset_color%} "  ;;esacif [[ $USER == root ]]; then    post_prompt="%{$fg_bold[$root_color]%}%#%{$reset_color%}"else    post_prompt="%{$fg_bold[$user_color]%}%#%{$reset_color%}"fiPS1="${host_prompt} ${jobs_total}${history_total} ${directory_prompt}${error_total}${post_prompt} "#if [[ $TERM == screen]; then     #function precmd() {          #print -Pn "\033]0;S $TTY:t{%100<...<%~%<<}\007"             #}#elsif [[ $TERM == linux ]]; then    #precmd () { print -Pn "\e]0;%m: %~\a" }#fi#}}}#{{{ Functions#function vi {        #LIMIT=$#        #for ((i = 1; i <= $LIMIT; i++ )) do                #eval file="\$$i"                #if [[ -e $file && ! -O $file ]]                #then                        #otherfile=1                #else                #fi        #done        #if [[ $otherfile = 1 ]]        #then                #command sudo vi "$@"        #else                #command vi "$@"        #fi#}_force_rehash() {  (( CURRENT == 1 )) && rehash  return 1  # Because we didn't really complete anything}edit-command-output() { BUFFER=$(eval $BUFFER) CURSOR=0}zle -N edit-command-output#}}}#{{{ Testing... Testing...#exec 2>>(while read line; do#print '\e[91m'${(q)line}'\e[0m' > /dev/tty; done &)watch=(notme)LOGCHECK=0#}}}#{{{ ZSH Modulesautoload -U compinit promptinit zcalc zsh-mime-setupcompinitpromptinitzsh-mime-setup#}}},v
RPROMPT="[%{$fg_no_bold[yellow]%}%?%{$reset_color%}]",v
ROMPT=set_prompt() ,V
	Last_Command=$? # Must come first!	Blue='\[\e[01;34m\]'	White='\[\e[01;37m\]'	Red='\[\e[01;31m\]'	Green='\[\e[01;32m\]'	Reset='\[\e[00m\]'	FancyX='\342\234\227'	Checkmark='\342\234\223'	# Add a bright white exit status for the last command	# If it was successful, print a green check mark. Otherwise, print	# a red X.	if [[ $Last_Command == 0 ]]; then		PS1="$Green$Checkmark "	else		PS1="$White\$? "		PS1+="$Red$FancyX "	fi	# If root, just print the host in red. Otherwise, print the current user	# and host in green.	if [[ $EUID == 0 ]]; then		PS1+="$Red\\h "	else		PS1+="$Green\\u@\\h "	fi	# Print the working directory and prompt marker in blue, and reset	# the text color to the default.	PS1+="$Blue\\w \\\$$Reset "}P,v
